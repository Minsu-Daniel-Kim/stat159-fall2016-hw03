r = 3
r
2 * 3
a = c(1,2,3,4)
a
length(a)
setwd("~/Dropbox/stat159/stat159-fall2016-hw03")
data = read.csv("data/Advertising.csv")
summary(data)
advertising = read.csv("data/Advertising.csv")
data
?lm
str(advertising)
advertising.model = lm(Sales ~ . -V1, data = advertising)
summary(advertising.model)
summary(advertising.model)
summary(advertising.model)$RSS
advertising.model
advertising.model$residuals
advertising.model$residuals ** 2
sum(advertising.model$residuals ** 2)
advertising.model$fitted.values
sum(advertising.model$fitted.values)
summary(advertising.model)
a = summary(advertising.model)
a
lm.summary = summary(advertising.model$r)
lm.summary
lm.summary = summary(advertising.model)
lm.summary$r.squared
lm.summary$fstatistic
lm.summary = summary(lm)
lm.summary = summary(advertising)
lm.summary
lm.summary = summary(advertising.model)
lm.summary
sd(lm.summary$residuals)
install.packages("dplyr")
install.packages("testthat")
install.packages("lubridate")
install.packages("ggplot2")
library(testthat)
str(advertising)
advertising.model.TV = lm(Sales ~ TV, data = advertising)
advertising.model.Radio = lm(Sales ~ Radio, data = advertising)
advertising.model.TV = lm(Sales ~ TV, data = advertising)
advertising.model.Radio = lm(Sales ~ Radio, data = advertising)
advertising.model.Newspaper = lm(Sales ~ Newspaper, data = advertising)
advertising.model.TV
advertising.model.TV$coefficients
advertising.model.Radio$coefficients
advertising.model.Radio$coefficients
advertising.model.Radio$coefficients[1]
summary(advertising.model.Radio)
advertising.model.Radio.summary = summary(advertising.model.Radio)
advertising.model.Radio.summary$sigma
advertising.model.Radio.summary$sigma
advertising.model.Radio.summary$fstatistic
str(advertising.model.Radio.summary)
advertising.model.Radio.summary$coefficients
advertising.model.Radio.summary$coefficients[,3]
advertising.model.Radio.summary$coefficients[1, 3]
advertising.model.Radio$coefficients
advertising.model.Radio$coefficients
advertising.model.Radio$coefficients
advertising.model.Radio = lm(Sales ~ Radio, data = advertising)
advertising.model.Radio$coefficients
advertising.model.Radio.summary$coefficients
advertising.model.Radio.summary$coefficients[1, 2]
advertising.model.TV$coefficients
advertising.model.Radio.summary$coefficients
names(advertising.model.TV.summary$coefficients)
advertising.model.TV = lm(Sales ~ TV, data = advertising)
advertising.model.TV.summary = summary(advertising.model.TV)
names(advertising.model.TV.summary$coefficients)
advertising.model.TV.summary$coefficients
colnames(advertising.model.TV.summary$coefficients)
colnames(advertising.model.TV.summary$coefficients) <- c("Coefficient Std.", "error", "t-statistic", "p-value")
advertising.model.TV.summary$coefficients
advertising.model.Radio = lm(Sales ~ Radio, data = advertising)
advertising.model.Radio.summary = summary(advertising.model.Radio)
colnames(advertising.model.Radio.summary$coefficients) <- c("Coefficient Std.", "error", "t-statistic", "p-value")
advertising.model.TV.summary$coefficients
advertising.model.Newspaper = lm(Sales ~ Newspaper, data = advertising)
advertising.model.Newspaper.summary = summary(advertising.model.Newspaper)
advertising.model.Newspaper.summary$coefficients <- c("Coefficient Std.", "error", "t-statistic", "p-value")
advertising.model.Newspaper.summary$coefficients
advertising.model.Newspaper = lm(Sales ~ Newspaper, data = advertising)
advertising.model.Newspaper.summary = summary(advertising.model.Newspaper)
advertising.model.Newspaper.summary$coefficients <- c("Coefficient Std.", "error", "t-statistic", "p-value")
advertising.model.Newspaper.summary$coefficients
advertising.model.Newspaper = lm(Sales ~ Newspaper, data = advertising)
advertising.model.Newspaper.summary = summary(advertising.model.Newspaper)
colnames(advertising.model.Newspaper.summary$coefficients) <- c("Coefficient Std.", "error", "t-statistic", "p-value")
advertising.model.Newspaper.summary$coefficients
advertising = read.csv("data/Advertising.csv")
advertising.model = lm(Sales ~ . -V1, data = advertising)
advertising.model
advertising.model$coefficients
summary(advertising.model)
summary(advertising.model)$coefficients
summary(advertising.model)$coefficients
summary(advertising.model)$coefficients
all.summary = summary(advertising.model)$coefficients
colnames(all.summary) <- c("Coefficient Std.", "error", "t-statistic", "p-value")
all.summary
all.summary
str(all.summary)
data.frame(all.summary)
str(data.frame(all.summary))
data.frame(all.summary)
advertising.model.TV = lm(Sales ~ TV, data = advertising)
advertising.model.TV.summary = summary(advertising.model.TV)
advertising.model.TV = lm(Sales ~ TV, data = advertising)
advertising.model.TV.summary = summary(advertising.model.TV)
all.TV = advertising.model.TV.summary$coefficients
colnames(all.TV) <- c("Coefficient", "Std. error", "t-statistic", "p-value")
advertising.model.TV = lm(Sales ~ TV, data = advertising)
advertising.model = lm(Sales ~ TV, data = advertising)
advertising.model
advertising.model
advertising.model.summary = summary(advertising.model)
coeff = advertising.model.summary$coefficients
colnames(coeff) <- c("Coefficient", "Std. error", "t-statistic", "p-value")
coeff
data.frame(coeff)
advertising.model.summary = summary(advertising.model)
coeff = advertising.model.summary$coefficients
colnames(coeff) <- c("Coefficient", "Std. error", "t-statistic", "p-value")
data.frame(coeff)
coeff
advertising.model.summary = summary(advertising.model)
coeff = advertising.model.summary$coefficients
data.frame(coeff)
colnames(coeff) <- c("Coefficient", "Std. error", "t-statistic", "p-value")
coeff
library(dplyr)
coeff
ifelse
?ifelse
mutate(coeff, p-value = ifelse((p-value < 0.0001), "< 0.0001", value))
mutate(coeff, p-value == ifelse((p-value < 0.0001), "< 0.0001", value))
?mutate
mutate(coeff, p-value = ifelse((p-value < 0.0001), "< 0.0001", p-value))
coeff
coeff$p-value
coeff$p-value
coeff$Coefficient
coeff
str(coeff)
advertising.model.summary = summary(advertising.model)
coeff = advertising.model.summary$coefficients
coeff = data.frame(coeff)
colnames(coeff) <- c("Coefficient", "Std. error", "t-statistic", "p-value")
coeff
str(coeff)
mutate(coeff, p-value = ifelse((p-value < 0.0001), "< 0.0001", p-value))
str(coeff)
coeff$p-value
coeff$`p-value`
coeff$`p-value` = ifelse((coeff$`p-value` < 0.0001), "< 0.0001", p-value))
coeff$`p-value` = ifelse((coeff$`p-value` < 0.0001), "< 0.0001", p-value)
coeff
setwd("~/Dropbox/stat159/stat159-fall2016-hw03")
library(testthat)
reg <- lm(mpg ~ disp + hp, data = mtcars)
regsum <- summary(reg)
sum(reg$residuals^2)
test_file("tests/tests.R")
getwd()
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
advertising = read.csv("data/Advertising.csv")
advertising = read.csv("../data/Advertising.csv")
setwd("~/Dropbox/stat159/stat159-fall2016-hw03/code/functions")
advertising = read.csv("../data/Advertising.csv")
advertising = read.csv("../../data/Advertising.csv")
test_file("code/tests/test-info-script.R")
setwd("~/Dropbox/stat159/stat159-fall2016-hw03")
setwd("~/Dropbox/stat159/stat159-fall2016-hw03")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
library(testthat)
source("../functions/regression-functions.R")
setwd("~/Dropbox/stat159/stat159-fall2016-hw03/code/tests")
source("../functions/regression-functions.R")
reg <- lm(mpg ~ disp + hp, data = mtcars)
regsum <- summary(reg)
sum(reg$residuals^2)
expect_equal(sum(reg$residuals^2), residual_sum_squares(reg))
expect_equal(sum(reg$residuals^2), residual_sum_squares(reg))
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
setwd("~/Dropbox/stat159/stat159-fall2016-hw03")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
total_sum_squares <- function(lm) {
return(sum(lm$fitted.values - mean(lm$fitted.values))^2)
}
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
lm
advertising = read.csv("../../data/Advertising.csv")
advertising.model
advertising.model
tt = summmary(advertising.model)
tt = summary(advertising.model)
tt$df
fitted(advertising.model)
2 ^ 3
expect_equal(sum(reg$residuals^2), residual_sum_squares(reg))
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
total_sum_squares <- function(lm) {
# TSS = 􏰂(yi − y ̄)2
return(sum( (lm$fitted.values - mean(lm$fitted.values)) ^ 2))
}
expect_equal(sum((mtcars$mpg - mean(mtcars$mpg))^2), total_sum_squares(reg))
source("../functions/regression-functions.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
mtcars$mpg
mtcars$mpg
reg$fitted.values
fitted(reg)
fitted(reg)
str(reg.finalizer)
str(reg.fitted.values)
str(reg.fitted.value)
str(reg$fitted.values)
mtcars$mpg
sum(reg$fitted.values)
sum(mtcars$mpg)
sd(mtcars$mpg)
sum(reg$fitted.values)
sd(reg$fitted.values)
reg$fitted.values
summary(reg$fitted.values)
summary(mtcars$mpg)
length(reg$fitted.values)
length(mtcars$mpg)
mtcars$mpg
mtcars
expect_equal(sum( (reg$fitted.values - mean(reg$fitted.values)) ^ 2), total_sum_squares(reg))
expect_equal(regsum$sigma, residual_std_error(reg))
expect_equal(regsum$sigma, residual_std_error(reg))
source("../functions/regression-functions.R")
source("functions/regression-functions.R")
source("../../functions/regression-functions.R")
test_file("code/tests/test-info-script.R")
expect_equal(regsum$sigma, residual_std_error(reg))
expect_equal(regsum$r.squared, r_squared(reg))
expect_equal(regsum$fstatistic[1], f_statistic(reg))
test_file("code/tests/test-info-script.R")
lm.summary = summary(lm)
f_statistic(advertising.model)
f_statistic <- function(lm) {
lm.summary = summary(lm)
return(lm.summary$fstatistic[1])
}
f_statistic(advertising.model)
test_file("code/tests/test-info-script.R")
f_statistic <- function(lm) {
lm.summary = summary(lm)
return(lm.summary$fstatistic[1])
}
test_file("code/tests/test-info-script.R")
lm.summary$fstatistic[1]
getwd()
source("code/functions/regression-functions.R")
test_file("code/tests/test-info-script.R")
test_file("code/tests/test-info-script.R")
expect_equal(regsum$fstatistic[1], f_statistic(reg)[1])
expect_equal(regsum$fstatistic[1], f_statistic(reg)[1])
advertising
advertising
cor()
cor(advertising)
cor(select(TV, Radio, Newspaper, Sales))
cor(select(advertising, TV, Radio, Newspaper, Sales))
advertising
head(advertising)
select(advertising, TV, Radio, Newspaper, Sales)
select(advertising, TV, Radio, Newspaper, Sales)
df = select(advertising, TV, Radio, Newspaper, Sales)
df = 3
colnames(df) = c("TV", "radio", "newspaper", "sales")
df = select(advertising, TV, Radio, Newspaper, Sales)
colnames(df) = c("TV", "radio", "newspaper", "sales")
df
cor(df)
cor(round(df, 4))
cor(round(df, 2))
cor(df)
round(cor(df), 2)
round(cor(df), 4)
round(cor(df), 4)
str(round(cor(df), 4))
class(round(cor(df), 4))
round(cor(df), 4)
upper.tri(round(cor(df), 4))
df[lower.tri(round(cor(df), 4), )] <- NA
lower.tri(round(cor(df), 4), )
lower_tri = lower.tri(round(cor(df), 4), )
df[lower_tri]
matrix_corr = round(cor(df)
lower_tri = lower.tri(matrix_corr, 4), )
matrix_corr
matrix_corr = round(cor(df)
matrix_corr = round(cor(df))
matrix_corr
matrix_corr = round(cor(df), 4)
matrix_corr
matrix_corr
lower_tri = lower.tri(matrix_corr)
lower_tri
lower_tri
matrix_corr[lower_tri]
matrix_corr[lower_tri] <- NA
matrix_corr
print(matrix_corr)
lm = advertising.model
residual_std_error(lm)
r_squared(lm)
f_statistic(lm)
f_statistic <- function(lm) {
lm.summary = summary(lm)
return(lm.summary$fstatistic[1])
}
f_statistic(lm)
summary(f_statistic(lm))
f_statistic(lm)[1]
summary(f_statistic(lm)[1])
f_statistic(lm)[1]
str(f_statistic(lm)[1])
f_statistic(lm)
Quantity = c("Residual standard error", "R^2", "F-statistic")
Quantity = c("Residual standard error", "R^2", "F-statistic")
Value = c(residual_std_error(lm), r_squared(lm), f_statistic(lm)
data.frame(Quantity, Value)
Value
Value = c(residual_std_error(lm), r_squared(lm), f_statistic(lm)
Value = c(residual_std_error(lm), r_squared(lm), f_statistic(lm))
Value
Quantity = c("Residual standard error", "R^2", "F-statistic")
data.frame(Quantity, Value)
library(data.table)
install.packages("data.table")
library(data.table)
library(ggplot2)
library(dplyr)
file = fread('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv')
write.csv(file, "data/Advertising.csv", row.names = FALSE)
data = read.csv("data/Advertising.csv")
data
head(data)
Value
head(data)
data[2:4]
pairs(iris[2:4], pch = 21)
pairs(data[2:4], pch = 21)
pairs(data[2:5], pch = 21)
df = select(data, TV, Radio, Newspaper, Sales)
colnames(df) = c("TV", "radio", "newspaper", "sales")
matrix_corr = round(cor(df), 4)
matrix_corr
pairs(data[2:5], pch = 21)
pairs(data[2:5], pch = 21)
matrix_corr
summary(df)
print("Summary Statistics of TV, Radio, Newspaper and Sales")
matrix_corr
sink("data/eda-output.txt")
print("Summary Statistics of TV, Radio, Newspaper and Sales")
summary(df)
print("Matrix of correlations")
matrix_corr
sink()
png("images/scatterplot-matrix.png")
pairs(data[2:5], pch = 21)
dev.off()
file = fread('http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv')
write.csv(file, "data/Advertising.csv", row.names = FALSE)
# read from Advertising.csv
data = read.csv("data/Advertising.csv")
# matrix of correlations
df = select(data, TV, Radio, Newspaper, Sales)
colnames(df) = c("TV", "radio", "newspaper", "sales")
matrix_corr = round(cor(df), 4)
matrix_corr
# pairwise scatterplots
pairs(data[2:5], pch = 21)
# summary statistics
sink("data/eda-output.txt")
print("Summary Statistics of TV, Radio, Newspaper and Sales")
summary(df)
print("Matrix of correlations")
matrix_corr
sink()
png("images/scatterplot-matrix.png")
pairs(data[2:5], pch = 21)
dev.off()
# computes summary statistics, histograms for all the variables (TV, Radio, Newspaper, and Sales)
# Histograms & Scatterplot
## Histogram of TV
dev.off()
ggplot(data, aes(x = TV)) + geom_histogram(binwidth = 10) + ggtitle("Histogram of TV") + xlab("Budgets on TV, in thousands of dollars")
png("images/histogram-tv.png")
png("images/histogram-sales.png")
## Histogram of Sales
ggplot(data, aes(x = Sales)) + geom_histogram(binwidth = 2) + ggtitle("Histogram of Sales") + xlab("Sales, in thousands of units")
dev.off()
png("images/histogram-radio.png")
## Histogram of Radio
ggplot(data, aes(x = Radio)) + geom_histogram(binwidth = 2) + ggtitle("Histogram of radio") + xlab("Budgets on radio, in thousands of dollars")
dev.off()
## Histogram of Newspaper
png("images/histogram-newspaper.png")
ggplot(data, aes(x = Newspaper)) + geom_histogram(binwidth = 2) + ggtitle("Histogram of newspaper") + xlab("Budgets on newspaper, in thousands of dollars")
dev.off()
png("images/histogram-tv.png")
ggplot(data, aes(x = TV)) + geom_histogram(binwidth = 10) + ggtitle("Histogram of TV") + xlab("Budgets on TV, in thousands of dollars")
dev.off()
## Histogram of Sales
png("images/histogram-sales.png")
ggplot(data, aes(x = Sales)) + geom_histogram(binwidth = 2) + ggtitle("Histogram of Sales") + xlab("Sales, in thousands of units")
dev.off()
## Histogram of Radio
png("images/histogram-radio.png")
ggplot(data, aes(x = Radio)) + geom_histogram(binwidth = 2) + ggtitle("Histogram of radio") + xlab("Budgets on radio, in thousands of dollars")
dev.off()
## Histogram of Newspaper
png("images/histogram-newspaper.png")
ggplot(data, aes(x = Newspaper)) + geom_histogram(binwidth = 2) + ggtitle("Histogram of newspaper") + xlab("Budgets on newspaper, in thousands of dollars")
dev.off()
?save
matrix_corr
save.image(matrix_corr, "data/correlation-matrix.RData")
matrix_corr
save(matrix_corr, "data/correlation-matrix.RData")
save(matrix_corr, file = "data/correlation-matrix.RData")
summary(advertising.model)
help(plot.lm)
advertising.model = lm(Sales ~ . -V1, data = advertising)
advertising.model.summary = summary(advertising.model)
save(advertising.model, advertising.model.summary, file = "data/regression.RData")
load("data/regression.RData")
help(plot.lm)
advertising
plot(advertising, which = c(1:2))
plot(advertising)
plot(advertising)
plot(advertising$Sales, advertising$Radio)
